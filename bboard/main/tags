!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AdvUser	models.py	/^class AdvUser(AbstractUser):$/;"	c
BBLoginView	views.py	/^class BBLoginView(LoginView):$/;"	c
BBLogoutView	views.py	/^class BBLogoutView(LoginRequiredMixin,LogoutView):$/;"	c
BBPasswordChangeView	views.py	/^class BBPasswordChangeView(SuccessMessageMixin, LoginRequiredMixin, PasswordChangeView):$/;"	c
ChangeUserInfoForm	forms.py	/^class ChangeUserInfoForm(forms.ModelForm):$/;"	c
ChangeUserInfoView	views.py	/^class ChangeUserInfoView(SuccessMessageMixin, LoginRequiredMixin, UpdateView):$/;"	c
MainConfig	apps.py	/^class MainConfig(AppConfig):$/;"	c
Meta	forms.py	/^    class Meta:$/;"	c	class:ChangeUserInfoForm
Meta	forms.py	/^    class Meta:$/;"	c	class:RegisterUserForm
Meta	models.py	/^    class Meta(AbstractUser.Meta):$/;"	c	class:AdvUser
Migration	migrations/0001_initial.py	/^class Migration(migrations.Migration):$/;"	c
RegisterDoneView	views.py	/^class RegisterDoneView(TemplateView):$/;"	c
RegisterUserForm	forms.py	/^class RegisterUserForm(forms.ModelForm):$/;"	c
RegisterUserView	views.py	/^class RegisterUserView(CreateView):$/;"	c
app_name	urls.py	/^app_name = 'main'$/;"	v
clean	forms.py	/^    def clean(self):$/;"	m	class:RegisterUserForm
clean_password1	forms.py	/^    def clean_password1(self):$/;"	m	class:RegisterUserForm
dependencies	migrations/0001_initial.py	/^    dependencies = [$/;"	v	class:Migration
dispatch	views.py	/^    def dispatch(self,request,*args, **kwargs):$/;"	m	class:ChangeUserInfoView
email	forms.py	/^    email = forms.EmailField(required=True, label='Адрес электронной почты')$/;"	v	class:ChangeUserInfoForm
email	forms.py	/^    email = forms.EmailField(required=True,label='Адрес электронной почты')$/;"	v	class:RegisterUserForm
fields	forms.py	/^        fields = ('username', 'email', 'first_name', 'last_name', 'send_messages')$/;"	v	class:ChangeUserInfoForm.Meta
fields	forms.py	/^        fields = ('username', 'email','password1','password2','first_name','last_name','send_messages')$/;"	v	class:RegisterUserForm.Meta
fields	migrations/0001_initial.py	/^            fields=[$/;"	v	class:Migration
form_class	views.py	/^    form_class = ChangeUserInfoForm$/;"	v	class:ChangeUserInfoView
form_class	views.py	/^    form_class = RegisterUserForm$/;"	v	class:RegisterUserView
get_object	views.py	/^    def get_object(self, queryset=None):$/;"	m	class:ChangeUserInfoView
help_text	forms.py	/^            help_text='Введите тот же самый пароль еще раз для проверки')$/;"	v	class:RegisterUserForm
help_text	forms.py	/^            help_text=password_validation.password_validators_help_text_html())$/;"	v	class:RegisterUserForm
index	views.py	/^def index(request):$/;"	f
initial	migrations/0001_initial.py	/^    initial = True$/;"	v	class:Migration
is_activated	models.py	/^    is_activated = models.BooleanField(default=True, db_index=True, verbose_name='Прошел активацию?')$/;"	v	class:AdvUser
managers	migrations/0001_initial.py	/^            managers=[$/;"	v	class:Migration
model	forms.py	/^        model = AdvUser$/;"	v	class:ChangeUserInfoForm.Meta
model	forms.py	/^        model = AdvUser$/;"	v	class:RegisterUserForm.Meta
model	views.py	/^    model = AdvUser$/;"	v	class:ChangeUserInfoView
model	views.py	/^    model = AdvUser$/;"	v	class:RegisterUserView
name	apps.py	/^    name = 'main'$/;"	v	class:MainConfig
name	migrations/0001_initial.py	/^            name='AdvUser',$/;"	v	class:Migration
operations	migrations/0001_initial.py	/^    operations = [$/;"	v	class:Migration
options	migrations/0001_initial.py	/^            options={$/;"	v	class:Migration
other_page	views.py	/^def other_page(request, page):$/;"	f
password1	forms.py	/^    password1 = forms.CharField(label='Пароль',$/;"	v	class:RegisterUserForm
password2	forms.py	/^    password2 = forms.CharField(label='Пароль (повторно)',$/;"	v	class:RegisterUserForm
profile	views.py	/^def profile(request):$/;"	f
save	forms.py	/^    def save(self, commit=True):$/;"	m	class:RegisterUserForm
send_activation_notification	utilities.py	/^def send_activation_notification(user):$/;"	f
send_messages	models.py	/^    send_messages = models.BooleanField(default=True, verbose_name='Слать оповещения о новых комментариях?')$/;"	v	class:AdvUser
signer	utilities.py	/^signer = Signer()$/;"	v
success_message	views.py	/^    success_message = 'Личные данные пользователя изменены'    $/;"	v	class:ChangeUserInfoView
success_message	views.py	/^    success_message = 'Пароль успешно изменен'$/;"	v	class:BBPasswordChangeView
success_url	views.py	/^    success_url = reverse_lazy('main:profile')$/;"	v	class:BBPasswordChangeView
success_url	views.py	/^    success_url = reverse_lazy('main:profile')$/;"	v	class:ChangeUserInfoView
success_url	views.py	/^    success_url = reverse_lazy('main:register_done')$/;"	v	class:RegisterUserView
template_name	views.py	/^    template_name = 'main\/change_user_info.html'$/;"	v	class:ChangeUserInfoView
template_name	views.py	/^    template_name = 'main\/login.html'$/;"	v	class:BBLoginView
template_name	views.py	/^    template_name = 'main\/logout.html'$/;"	v	class:BBLogoutView
template_name	views.py	/^    template_name = 'main\/password_change.html'$/;"	v	class:BBPasswordChangeView
template_name	views.py	/^    template_name = 'main\/register_done.html'$/;"	v	class:RegisterDoneView
template_name	views.py	/^    template_name = 'main\/register_user.html'$/;"	v	class:RegisterUserView
urlpatterns	urls.py	/^urlpatterns = [$/;"	v
user_activate	views.py	/^def user_activate(request, sign):$/;"	f
user_registrated	models.py	/^user_registrated = Signal(providing_args=['instance'])$/;"	v
user_registrated_dispatcher	models.py	/^def user_registrated_dispatcher(sender, **kwargs):$/;"	f
verbose_name	apps.py	/^    verbose_name = 'Доска объявлений'$/;"	v	class:MainConfig
widget	forms.py	/^            widget=forms.PasswordInput,$/;"	v	class:RegisterUserForm
